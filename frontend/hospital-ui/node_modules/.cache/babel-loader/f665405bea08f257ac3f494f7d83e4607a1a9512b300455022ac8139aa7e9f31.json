{"ast":null,"code":"import apiClient from './apiClient';\nexport const doctorService = {\n  // Get all doctors\n  getAllDoctors: async () => {\n    const response = await apiClient.get('/doctors');\n    return response.data.data;\n  },\n  // Get doctor by ID\n  getDoctorById: async id => {\n    const response = await apiClient.get(`/doctors/${id}`);\n    return response.data.data;\n  },\n  // Create doctor\n  createDoctor: async doctor => {\n    const response = await apiClient.post('/doctors', doctor);\n    return response.data.data;\n  },\n  // Update doctor\n  updateDoctor: async (id, doctor) => {\n    const response = await apiClient.put(`/doctors/${id}`, doctor);\n    return response.data.data;\n  },\n  // Delete doctor\n  deleteDoctor: async id => {\n    await apiClient.delete(`/doctors/${id}`);\n  },\n  // Update doctor availability\n  updateAvailability: async (id, availability) => {\n    const response = await apiClient.patch(`/doctors/${id}/availability`, availability);\n    return response.data.data;\n  },\n  // Get doctors by specialization\n  getDoctorsBySpecialization: async specialization => {\n    const response = await apiClient.get(`/doctors/specialization/${specialization}`);\n    return response.data.data;\n  }\n};","map":{"version":3,"names":["apiClient","doctorService","getAllDoctors","response","get","data","getDoctorById","id","createDoctor","doctor","post","updateDoctor","put","deleteDoctor","delete","updateAvailability","availability","patch","getDoctorsBySpecialization","specialization"],"sources":["/Users/avyakth/Documents/Acads/Placements/Projects/Hospital-Management-System/frontend/hospital-ui/src/services/doctorService.ts"],"sourcesContent":["import apiClient from './apiClient';\nimport { ApiResponse, Doctor, DoctorFormData, DoctorAvailability } from '../types';\n\nexport const doctorService = {\n  // Get all doctors\n  getAllDoctors: async (): Promise<Doctor[]> => {\n    const response = await apiClient.get<ApiResponse<Doctor[]>>('/doctors');\n    return response.data.data;\n  },\n\n  // Get doctor by ID\n  getDoctorById: async (id: string | number): Promise<Doctor> => {\n    const response = await apiClient.get<ApiResponse<Doctor>>(`/doctors/${id}`);\n    return response.data.data;\n  },\n\n  // Create doctor\n  createDoctor: async (doctor: DoctorFormData): Promise<Doctor> => {\n    const response = await apiClient.post<ApiResponse<Doctor>>('/doctors', doctor);\n    return response.data.data;\n  },\n\n  // Update doctor\n  updateDoctor: async (id: string | number, doctor: DoctorFormData): Promise<Doctor> => {\n    const response = await apiClient.put<ApiResponse<Doctor>>(`/doctors/${id}`, doctor);\n    return response.data.data;\n  },\n\n  // Delete doctor\n  deleteDoctor: async (id: string | number): Promise<void> => {\n    await apiClient.delete(`/doctors/${id}`);\n  },\n\n  // Update doctor availability\n  updateAvailability: async (id: string | number, availability: DoctorAvailability): Promise<Doctor> => {\n    const response = await apiClient.patch<ApiResponse<Doctor>>(\n      `/doctors/${id}/availability`,\n      availability\n    );\n    return response.data.data;\n  },\n\n  // Get doctors by specialization\n  getDoctorsBySpecialization: async (specialization: string): Promise<Doctor[]> => {\n    const response = await apiClient.get<ApiResponse<Doctor[]>>(\n      `/doctors/specialization/${specialization}`\n    );\n    return response.data.data;\n  },\n};\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AAGnC,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACAC,aAAa,EAAE,MAAAA,CAAA,KAA+B;IAC5C,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAwB,UAAU,CAAC;IACvE,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAC,aAAa,EAAE,MAAOC,EAAmB,IAAsB;IAC7D,MAAMJ,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAsB,YAAYG,EAAE,EAAE,CAAC;IAC3E,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAG,YAAY,EAAE,MAAOC,MAAsB,IAAsB;IAC/D,MAAMN,QAAQ,GAAG,MAAMH,SAAS,CAACU,IAAI,CAAsB,UAAU,EAAED,MAAM,CAAC;IAC9E,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAM,YAAY,EAAE,MAAAA,CAAOJ,EAAmB,EAAEE,MAAsB,KAAsB;IACpF,MAAMN,QAAQ,GAAG,MAAMH,SAAS,CAACY,GAAG,CAAsB,YAAYL,EAAE,EAAE,EAAEE,MAAM,CAAC;IACnF,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAQ,YAAY,EAAE,MAAON,EAAmB,IAAoB;IAC1D,MAAMP,SAAS,CAACc,MAAM,CAAC,YAAYP,EAAE,EAAE,CAAC;EAC1C,CAAC;EAED;EACAQ,kBAAkB,EAAE,MAAAA,CAAOR,EAAmB,EAAES,YAAgC,KAAsB;IACpG,MAAMb,QAAQ,GAAG,MAAMH,SAAS,CAACiB,KAAK,CACpC,YAAYV,EAAE,eAAe,EAC7BS,YACF,CAAC;IACD,OAAOb,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAa,0BAA0B,EAAE,MAAOC,cAAsB,IAAwB;IAC/E,MAAMhB,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAClC,2BAA2Be,cAAc,EAC3C,CAAC;IACD,OAAOhB,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}