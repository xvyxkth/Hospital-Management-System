{"ast":null,"code":"import apiClient from './apiClient';\nexport const billingService = {\n  // Get all invoices\n  getAllInvoices: async () => {\n    const response = await apiClient.get('/invoices');\n    return response.data.data;\n  },\n  // Get invoice by ID\n  getInvoiceById: async id => {\n    const response = await apiClient.get(`/invoices/${id}`);\n    return response.data.data;\n  },\n  // Create invoice\n  createInvoice: async invoice => {\n    const response = await apiClient.post('/invoices', invoice);\n    return response.data.data;\n  },\n  // Update invoice\n  updateInvoice: async (id, invoice) => {\n    const response = await apiClient.put(`/invoices/${id}`, invoice);\n    return response.data.data;\n  },\n  // Delete invoice\n  deleteInvoice: async id => {\n    await apiClient.delete(`/invoices/${id}`);\n  },\n  // Get invoices by patient\n  getInvoicesByPatient: async patientId => {\n    const response = await apiClient.get(`/invoices/patient/${patientId}`);\n    return response.data.data;\n  },\n  // Get payments for invoice\n  getPaymentsByInvoice: async invoiceId => {\n    const response = await apiClient.get(`/invoices/${invoiceId}/payments`);\n    return response.data.data;\n  },\n  // Record payment\n  recordPayment: async (invoiceId, amount, paymentMethod, transactionId, notes) => {\n    const response = await apiClient.post(`/invoices/${invoiceId}/payments`, {\n      amount,\n      paymentMethod,\n      transactionId,\n      notes\n    });\n    return response.data.data;\n  }\n};","map":{"version":3,"names":["apiClient","billingService","getAllInvoices","response","get","data","getInvoiceById","id","createInvoice","invoice","post","updateInvoice","put","deleteInvoice","delete","getInvoicesByPatient","patientId","getPaymentsByInvoice","invoiceId","recordPayment","amount","paymentMethod","transactionId","notes"],"sources":["/Users/avyakth/Documents/Acads/Placements/Projects/Hospital-Management-System/frontend/hospital-ui/src/services/billingService.ts"],"sourcesContent":["import apiClient from './apiClient';\nimport { ApiResponse, Invoice, Payment, PaymentMethod } from '../types';\n\nexport const billingService = {\n  // Get all invoices\n  getAllInvoices: async (): Promise<Invoice[]> => {\n    const response = await apiClient.get<ApiResponse<Invoice[]>>('/invoices');\n    return response.data.data;\n  },\n\n  // Get invoice by ID\n  getInvoiceById: async (id: number): Promise<Invoice> => {\n    const response = await apiClient.get<ApiResponse<Invoice>>(`/invoices/${id}`);\n    return response.data.data;\n  },\n\n  // Create invoice\n  createInvoice: async (invoice: Partial<Invoice>): Promise<Invoice> => {\n    const response = await apiClient.post<ApiResponse<Invoice>>('/invoices', invoice);\n    return response.data.data;\n  },\n\n  // Update invoice\n  updateInvoice: async (id: number, invoice: Partial<Invoice>): Promise<Invoice> => {\n    const response = await apiClient.put<ApiResponse<Invoice>>(`/invoices/${id}`, invoice);\n    return response.data.data;\n  },\n\n  // Delete invoice\n  deleteInvoice: async (id: number): Promise<void> => {\n    await apiClient.delete(`/invoices/${id}`);\n  },\n\n  // Get invoices by patient\n  getInvoicesByPatient: async (patientId: number): Promise<Invoice[]> => {\n    const response = await apiClient.get<ApiResponse<Invoice[]>>(\n      `/invoices/patient/${patientId}`\n    );\n    return response.data.data;\n  },\n\n  // Get payments for invoice\n  getPaymentsByInvoice: async (invoiceId: number): Promise<Payment[]> => {\n    const response = await apiClient.get<ApiResponse<Payment[]>>(\n      `/invoices/${invoiceId}/payments`\n    );\n    return response.data.data;\n  },\n\n  // Record payment\n  recordPayment: async (\n    invoiceId: number,\n    amount: number,\n    paymentMethod: PaymentMethod,\n    transactionId?: string,\n    notes?: string\n  ): Promise<Payment> => {\n    const response = await apiClient.post<ApiResponse<Payment>>(\n      `/invoices/${invoiceId}/payments`,\n      {\n        amount,\n        paymentMethod,\n        transactionId,\n        notes,\n      }\n    );\n    return response.data.data;\n  },\n};\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AAGnC,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAgC;IAC9C,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAyB,WAAW,CAAC;IACzE,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAC,cAAc,EAAE,MAAOC,EAAU,IAAuB;IACtD,MAAMJ,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAuB,aAAaG,EAAE,EAAE,CAAC;IAC7E,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAG,aAAa,EAAE,MAAOC,OAAyB,IAAuB;IACpE,MAAMN,QAAQ,GAAG,MAAMH,SAAS,CAACU,IAAI,CAAuB,WAAW,EAAED,OAAO,CAAC;IACjF,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAM,aAAa,EAAE,MAAAA,CAAOJ,EAAU,EAAEE,OAAyB,KAAuB;IAChF,MAAMN,QAAQ,GAAG,MAAMH,SAAS,CAACY,GAAG,CAAuB,aAAaL,EAAE,EAAE,EAAEE,OAAO,CAAC;IACtF,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAQ,aAAa,EAAE,MAAON,EAAU,IAAoB;IAClD,MAAMP,SAAS,CAACc,MAAM,CAAC,aAAaP,EAAE,EAAE,CAAC;EAC3C,CAAC;EAED;EACAQ,oBAAoB,EAAE,MAAOC,SAAiB,IAAyB;IACrE,MAAMb,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAClC,qBAAqBY,SAAS,EAChC,CAAC;IACD,OAAOb,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAY,oBAAoB,EAAE,MAAOC,SAAiB,IAAyB;IACrE,MAAMf,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAClC,aAAac,SAAS,WACxB,CAAC;IACD,OAAOf,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAc,aAAa,EAAE,MAAAA,CACbD,SAAiB,EACjBE,MAAc,EACdC,aAA4B,EAC5BC,aAAsB,EACtBC,KAAc,KACO;IACrB,MAAMpB,QAAQ,GAAG,MAAMH,SAAS,CAACU,IAAI,CACnC,aAAaQ,SAAS,WAAW,EACjC;MACEE,MAAM;MACNC,aAAa;MACbC,aAAa;MACbC;IACF,CACF,CAAC;IACD,OAAOpB,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}