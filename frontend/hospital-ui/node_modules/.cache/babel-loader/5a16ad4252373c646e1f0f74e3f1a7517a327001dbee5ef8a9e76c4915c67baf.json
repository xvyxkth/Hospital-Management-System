{"ast":null,"code":"// Format date to YYYY-MM-DD\nexport const formatDate = date => {\n  if (!date) return 'N/A';\n  if (typeof date === 'string') {\n    return date.split('T')[0];\n  }\n  return date.toISOString().split('T')[0];\n};\n\n// Format time to HH:MM\nexport const formatTime = date => {\n  if (!date) return 'N/A';\n  if (typeof date === 'string') {\n    const time = date.split('T')[1];\n    return time ? time.substring(0, 5) : date;\n  }\n  return date.toTimeString().substring(0, 5);\n};\n\n// Format datetime for display\nexport const formatDateTime = dateTime => {\n  const date = new Date(dateTime);\n  return date.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n// Format currency\nexport const formatCurrency = amount => {\n  if (amount === null || amount === undefined) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount);\n};\n\n// Calculate age from date of birth\nexport const calculateAge = dateOfBirth => {\n  const today = new Date();\n  const birthDate = new Date(dateOfBirth);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n    age--;\n  }\n  return age;\n};\n\n// Validate email\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Validate phone (10 digits)\nexport const isValidPhone = phone => {\n  const phoneRegex = /^\\d{10}$/;\n  return phoneRegex.test(phone);\n};\n\n// Get status badge color\nexport const getStatusColor = status => {\n  const statusColors = {\n    SCHEDULED: '#3b82f6',\n    // blue\n    COMPLETED: '#10b981',\n    // green\n    CANCELLED: '#ef4444',\n    // red\n    NO_SHOW: '#f59e0b',\n    // orange\n    PENDING: '#f59e0b',\n    // orange\n    PAID: '#10b981',\n    // green\n    PARTIALLY_PAID: '#3b82f6' // blue\n  };\n  return statusColors[status] || '#6b7280'; // gray default\n};\n\n// Get specialization display name\nexport const getSpecializationName = specialization => {\n  return specialization.split('_').map(word => word.charAt(0) + word.slice(1).toLowerCase()).join(' ');\n};\n\n// Handle API errors\nexport const getErrorMessage = error => {\n  if (error.response) {\n    // Server responded with error\n    const data = error.response.data;\n    if (typeof data.message === 'string') {\n      return data.message;\n    } else if (typeof data.message === 'object') {\n      // Validation errors object\n      return Object.values(data.message).join(', ');\n    }\n    return data.error || 'An error occurred';\n  } else if (error.request) {\n    return 'Network error - unable to reach server';\n  } else {\n    return error.message || 'An unexpected error occurred';\n  }\n};","map":{"version":3,"names":["formatDate","date","split","toISOString","formatTime","time","substring","toTimeString","formatDateTime","dateTime","Date","toLocaleString","year","month","day","hour","minute","formatCurrency","amount","undefined","Intl","NumberFormat","style","currency","format","calculateAge","dateOfBirth","today","birthDate","age","getFullYear","monthDiff","getMonth","getDate","isValidEmail","email","emailRegex","test","isValidPhone","phone","phoneRegex","getStatusColor","status","statusColors","SCHEDULED","COMPLETED","CANCELLED","NO_SHOW","PENDING","PAID","PARTIALLY_PAID","getSpecializationName","specialization","map","word","charAt","slice","toLowerCase","join","getErrorMessage","error","response","data","message","Object","values","request"],"sources":["/Users/avyakth/Documents/Acads/Placements/Projects/Hospital-Management-System/frontend/hospital-ui/src/utils/helpers.ts"],"sourcesContent":["// Format date to YYYY-MM-DD\nexport const formatDate = (date: Date | string | null | undefined): string => {\n  if (!date) return 'N/A';\n  if (typeof date === 'string') {\n    return date.split('T')[0];\n  }\n  return date.toISOString().split('T')[0];\n};\n\n// Format time to HH:MM\nexport const formatTime = (date: Date | string | null | undefined): string => {\n  if (!date) return 'N/A';\n  if (typeof date === 'string') {\n    const time = date.split('T')[1];\n    return time ? time.substring(0, 5) : date;\n  }\n  return date.toTimeString().substring(0, 5);\n};\n\n// Format datetime for display\nexport const formatDateTime = (dateTime: string): string => {\n  const date = new Date(dateTime);\n  return date.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\n// Format currency\nexport const formatCurrency = (amount: number | null | undefined): string => {\n  if (amount === null || amount === undefined) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n};\n\n// Calculate age from date of birth\nexport const calculateAge = (dateOfBirth: string): number => {\n  const today = new Date();\n  const birthDate = new Date(dateOfBirth);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  \n  return age;\n};\n\n// Validate email\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Validate phone (10 digits)\nexport const isValidPhone = (phone: string): boolean => {\n  const phoneRegex = /^\\d{10}$/;\n  return phoneRegex.test(phone);\n};\n\n// Get status badge color\nexport const getStatusColor = (status: string): string => {\n  const statusColors: { [key: string]: string } = {\n    SCHEDULED: '#3b82f6',    // blue\n    COMPLETED: '#10b981',    // green\n    CANCELLED: '#ef4444',    // red\n    NO_SHOW: '#f59e0b',      // orange\n    PENDING: '#f59e0b',      // orange\n    PAID: '#10b981',         // green\n    PARTIALLY_PAID: '#3b82f6', // blue\n  };\n  \n  return statusColors[status] || '#6b7280'; // gray default\n};\n\n// Get specialization display name\nexport const getSpecializationName = (specialization: string): string => {\n  return specialization\n    .split('_')\n    .map(word => word.charAt(0) + word.slice(1).toLowerCase())\n    .join(' ');\n};\n\n// Handle API errors\nexport const getErrorMessage = (error: any): string => {\n  if (error.response) {\n    // Server responded with error\n    const data = error.response.data;\n    if (typeof data.message === 'string') {\n      return data.message;\n    } else if (typeof data.message === 'object') {\n      // Validation errors object\n      return Object.values(data.message).join(', ');\n    }\n    return data.error || 'An error occurred';\n  } else if (error.request) {\n    return 'Network error - unable to reach server';\n  } else {\n    return error.message || 'An unexpected error occurred';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}