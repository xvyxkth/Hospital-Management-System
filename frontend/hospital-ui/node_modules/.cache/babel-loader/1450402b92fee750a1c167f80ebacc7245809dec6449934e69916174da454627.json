{"ast":null,"code":"import axios from 'axios';\n\n// API Base URL - pointing to API Gateway\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds\n});\n\n// Request interceptor - Add JWT token to all requests\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor - Handle errors globally\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    // Server responded with error status\n    const status = error.response.status;\n    if (status === 401) {\n      // Unauthorized - redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('username');\n      localStorage.removeItem('role');\n      window.location.href = '/login';\n    } else if (status === 403) {\n      // Forbidden\n      console.error('Access denied:', error.response.data);\n    } else if (status === 404) {\n      console.error('Resource not found:', error.response.data);\n    } else if (status >= 500) {\n      console.error('Server error:', error.response.data);\n    }\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error('Network error - no response from server');\n  } else {\n    // Something else happened\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","console","data","message"],"sources":["/Users/avyakth/Documents/Acads/Placements/Projects/Hospital-Management-System/frontend/hospital-ui/src/services/apiClient.ts"],"sourcesContent":["import axios from 'axios';\n\n// API Base URL - pointing to API Gateway\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 seconds\n});\n\n// Request interceptor - Add JWT token to all requests\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor - Handle errors globally\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      // Server responded with error status\n      const status = error.response.status;\n      \n      if (status === 401) {\n        // Unauthorized - redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        localStorage.removeItem('role');\n        window.location.href = '/login';\n      } else if (status === 403) {\n        // Forbidden\n        console.error('Access denied:', error.response.data);\n      } else if (status === 404) {\n        console.error('Resource not found:', error.response.data);\n      } else if (status >= 500) {\n        console.error('Server error:', error.response.data);\n      }\n    } else if (error.request) {\n      // Request was made but no response received\n      console.error('Network error - no response from server');\n    } else {\n      // Something else happened\n      console.error('Error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;;AAEpF;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,SAAS,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,MAAMC,MAAM,GAAGJ,KAAK,CAACG,QAAQ,CAACC,MAAM;IAEpC,IAAIA,MAAM,KAAK,GAAG,EAAE;MAClB;MACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;MAChCR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC;MACnCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;MAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC,CAAC,MAAM,IAAIJ,MAAM,KAAK,GAAG,EAAE;MACzB;MACAK,OAAO,CAACT,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACG,QAAQ,CAACO,IAAI,CAAC;IACtD,CAAC,MAAM,IAAIN,MAAM,KAAK,GAAG,EAAE;MACzBK,OAAO,CAACT,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACG,QAAQ,CAACO,IAAI,CAAC;IAC3D,CAAC,MAAM,IAAIN,MAAM,IAAI,GAAG,EAAE;MACxBK,OAAO,CAACT,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACG,QAAQ,CAACO,IAAI,CAAC;IACrD;EACF,CAAC,MAAM,IAAIV,KAAK,CAACP,OAAO,EAAE;IACxB;IACAgB,OAAO,CAACT,KAAK,CAAC,yCAAyC,CAAC;EAC1D,CAAC,MAAM;IACL;IACAS,OAAO,CAACT,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACW,OAAO,CAAC;EACxC;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}