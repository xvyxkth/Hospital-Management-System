services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: ./api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      PATIENT_SERVICE_URL: http://patient-service:8081
      DOCTOR_SERVICE_URL: http://doctor-service:8082
      APPOINTMENT_SERVICE_URL: http://appointment-service:8083
      BILLING_SERVICE_URL: http://billing-service:8084
      JWT_SECRET: hospital-management-system-secret-key-change-in-production
    depends_on:
      - patient-service
      - doctor-service
      - appointment-service
      - billing-service
    networks:
      - hospital-network
    restart: unless-stopped

  postgres-patient:
    image: postgres:15-alpine
    container_name: postgres-patient
    environment:
      POSTGRES_DB: patient_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - patient-db-data:/var/lib/postgresql/data
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-doctor:
    image: postgres:15-alpine
    container_name: postgres-doctor
    environment:
      POSTGRES_DB: doctor_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - doctor-db-data:/var/lib/postgresql/data
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  patient-service:
    build:
      context: ./backend
      dockerfile: ./patient-service/Dockerfile
    container_name: patient-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-patient:5432/patient_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      postgres-patient:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital-network
    restart: unless-stopped

  doctor-service:
    build:
      context: ./backend
      dockerfile: ./doctor-service/Dockerfile
    container_name: doctor-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-doctor:5432/doctor_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      postgres-doctor:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital-network
    restart: unless-stopped

  postgres-appointment:
    image: postgres:15-alpine
    container_name: postgres-appointment
    environment:
      POSTGRES_DB: appointment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - appointment-db-data:/var/lib/postgresql/data
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  appointment-service:
    build:
      context: ./backend
      dockerfile: ./appointment-service/Dockerfile
    container_name: appointment-service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-appointment:5432/appointment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICES_PATIENT_URL: http://patient-service:8081/api/v1/patients
      SERVICES_DOCTOR_URL: http://doctor-service:8082/api/v1/doctors
    depends_on:
      postgres-appointment:
        condition: service_healthy
      patient-service:
        condition: service_started
      doctor-service:
        condition: service_started
    networks:
      - hospital-network
    restart: unless-stopped

  postgres-billing:
    image: postgres:15-alpine
    container_name: postgres-billing
    environment:
      POSTGRES_DB: billing_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - billing-db-data:/var/lib/postgresql/data
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  billing-service:
    build:
      context: ./backend
      dockerfile: ./billing-service/Dockerfile
    container_name: billing-service
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-billing:5432/billing_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICES_PATIENT_URL: http://patient-service:8081/api/v1/patients
      SERVICES_APPOINTMENT_URL: http://appointment-service:8083/api/v1/appointments
    depends_on:
      postgres-billing:
        condition: service_healthy
      patient-service:
        condition: service_started
      appointment-service:
        condition: service_started
    networks:
      - hospital-network
    restart: unless-stopped

networks:
  hospital-network:
    driver: bridge

volumes:
  patient-db-data:
  doctor-db-data:
  appointment-db-data:
  billing-db-data:
